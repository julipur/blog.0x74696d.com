<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 0x74696d</title>
    <link>http://0x74696d.com/posts/</link>
    <description>Recent content in Posts on 0x74696d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://0x74696d.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Be Careful What You Benchmark</title>
      <link>http://0x74696d.com/posts/be-careful-what-you-benchmark/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/be-careful-what-you-benchmark/</guid>
      <description>I have a project where I need to generate unique database keys at the client rather than using autoincrementing keys, in order to support sharding at the client. (I&#39;m effectively re-implementing Etsy&#39;s MySQL master-master scheme if you want to know more.) I don&#39;t want to use UUIDs because they&#39;re 128 bits instead of 64 bits, and because they&#39;re not time ordered they can result in poor insert performance. So I&#39;m implementing Twitter&#39;s now-retired Snowflake, which produces roughly-ordered but unique IDs.</description>
    </item>
    
    <item>
      <title>Secrets Management in the Autopilot Pattern</title>
      <link>http://0x74696d.com/posts/secrets-management-in-the-autopilotpattern/</link>
      <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/secrets-management-in-the-autopilotpattern/</guid>
      <description>No matter how we deploy our applications, managing secrets invokes the chicken-and-the-egg problem. Any system for secrets management has to answer the question of how the application authenticates to the system managing the secrets in the first place. Applications built with the Autopilot Pattern can be easily made to leverage secrets management services, but it&#39;s important to understand the security model and threat model of these services.
Check out the full article on the official Joyent blog.</description>
    </item>
    
    <item>
      <title>Consul and etcd in the Autopilot Pattern</title>
      <link>http://0x74696d.com/posts/consul-etcd-on-triton/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/consul-etcd-on-triton/</guid>
      <description>Applications developed with the Autopilot Pattern are self-operating and self-configuring but use an external service catalog like Consul or etcd to store and coordinate global state. ContainerPilot sends the service catalog heartbeats to record that an instance of an application is still up and running. Both Consul and etcd have interesting assumptions about their topology that end users deploying on Triton should be aware of.
Check out the full article on the official Joyent blog.</description>
    </item>
    
    <item>
      <title>Video - Introduction to the Autopilot Pattern</title>
      <link>http://0x74696d.com/posts/video-intro-autopilot-pattern/</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/video-intro-autopilot-pattern/</guid>
      <description>In this video I introduce the Autopilot Pattern with illustrated examples and a walkthrough of our Autopilot Pattern example application and how ContainerPilot makes it easier to containerize applications new and old.
Check out the full article and the video on the official Joyent blog...</description>
    </item>
    
    <item>
      <title>Monitoring and scaling with ContainerPilot telemetry</title>
      <link>http://0x74696d.com/posts/monitoring-and-scaling-with-application-telemetry/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/monitoring-and-scaling-with-application-telemetry/</guid>
      <description>Application health checking is a key feature of ContainerPilot (formerly Containerbuddy). The user-defined health check gives us a binary way of determining whether the application is working. If the application is healthy, ContainerPilot sends a heartbeat to the discovery catalog, and if it&#39;s not, other ContainerPilot-enabled applications will stop sending requests to it. But automatic scaling of a service depends on more than just the pass/fail of a health check. Every application has key performance indicators that tell us if the service is nearing overload and should be scaled up or is under-utilized and can be scaled down.</description>
    </item>
    
    <item>
      <title>Building sqlite for rust</title>
      <link>http://0x74696d.com/posts/building-sqlite-for-rust/</link>
      <pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/building-sqlite-for-rust/</guid>
      <description>I&#39;ve been playing around with Rust a bit lately and needed to build something with an embedded database, so I reached for SQLite. I need to build SQLite with some specific features enabled and that&#39;s hard to guarantee with system packages cross-platform. This gave me a chance to try out building a Rust project linked with some custom C code. The overall direction I&#39;m taking here is largely coming from this thread and the Cargo build script page.</description>
    </item>
    
    <item>
      <title>Production Docker logs on Triton</title>
      <link>http://0x74696d.com/posts/docker-log-drivers/</link>
      <pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/docker-log-drivers/</guid>
      <description>In a previous post I talked about an approach I took getting logs out of Docker containers when I first started using Docker way back at the end of 2013. But Docker has done a lot of growing up since then!
Using docker logs to get our container logs works in development but in production we need to centralize our logs. Triton has support for the syslog, Graylog, and Fluentd log drivers and we can use them to support production-ready log collection.</description>
    </item>
    
    <item>
      <title>Implementing the autopilot pattern</title>
      <link>http://0x74696d.com/posts/applications-on-autopilot/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/applications-on-autopilot/</guid>
      <description>Deploying containerized applications and connecting them together is a challenge because it forces developers to design for operationalization. Autopiloting applications are a powerful design pattern to solving these problems. By pushing the responsibility for understanding startup, shutdown, scaling, and recovery from failure into the application, we can build intelligent architectures that minimize human intervention in operation. But we can&#39;t rewrite all our applications at once, so we need a way to build application containers that can knit together legacy and greenfield applications alike.</description>
    </item>
    
    <item>
      <title>MySQL on Autopilot</title>
      <link>http://0x74696d.com/posts/mysql-on-autopilot/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/mysql-on-autopilot/</guid>
      <description>DBaaS solutions lock too many doors: we&#39;re locked into a service provider and locked out of configuring it as we need. Fortunately, modern operational patterns are emerging that eliminate the complexity of running even sophisticated applications like databases and free us from the lock-in of *aaS. Now we are free to develop on our laptops and deploy to private data centers, combining the simplicity we thought was only possible with *aaS with the portability of running applications on our own terms.</description>
    </item>
    
    <item>
      <title>Blog Diet</title>
      <link>http://0x74696d.com/posts/blog-diet/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/blog-diet/</guid>
      <description>It&#39;s a new year and so why not take the opportunity to revisit my site and make a few improvements? I&#39;ve had a few people mention in the past that they&#39;ve had some readability issues with some of the design choices (particularly on Linux). And as I&#39;ve added more content I&#39;ve found a few little layout quirks that I&#39;m not 100% happy with. Let&#39;s dive right in.
The Spec The major design criteria are:</description>
    </item>
    
    <item>
      <title>Deploy a microservices stack in seconds</title>
      <link>http://0x74696d.com/posts/microservices-stack-in-seconds/</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/microservices-stack-in-seconds/</guid>
      <description>Over the last couple weeks I&#39;ve been working on a project at Joyent to demonstrate the components of a container-native microservices architecture. Today I&#39;ve put the pieces together. I&#39;m using Containerbuddy in a stack that includes Nginx, Couchbase, a Node.js application, Cloudflare DNS, and our Triton platform. All the components can be swapped out for your favorite ones just by changing a docker-compose.yml description.
And there&#39;s not a scheduler in sight!</description>
    </item>
    
    <item>
      <title>Automatic DNS Updates w/ Containerbuddy</title>
      <link>http://0x74696d.com/posts/dynamic-dns-for-docker-w-containerbuddy/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/dynamic-dns-for-docker-w-containerbuddy/</guid>
      <description>In a container-native project, we need to balance the desire for ephemeral infrastructure with the requirement to provide a predictable load-balanced interface with the outside world. By updating DNS records for a domain based on changes in the discovery service, we can make sure our users can reach the load-balancer for our project at all times.
Continue reading this article on the official Joyent blog...</description>
    </item>
    
    <item>
      <title>Container-Native Architecture [talk]</title>
      <link>http://0x74696d.com/posts/container-native-architecture-talk/</link>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/container-native-architecture-talk/</guid>
      <description>On October 29th I gave a talk on container-native architecture at ContainerDays NYC.
From the programme:
 Moving your application into a container and deploying it to production is a great first step towards taking advantage of containerization. This gets you past &amp;quot;works on my machine&amp;quot;, and Docker makes this easy. But the real value of containers -- fast immutable deployments, maximizing resource utilization, and bare-metal performance -- comes from an architecture optimized for containers.</description>
    </item>
    
    <item>
      <title>Anti-patterns for service discovery in Docker</title>
      <link>http://0x74696d.com/posts/anti-patterns-for-service-discovery-in-docker/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/anti-patterns-for-service-discovery-in-docker/</guid>
      <description>Common patterns for microservice container deployments carry hidden assumptions that increase operational costs and put availability at risk. Let&#39;s break down the reasons why and how to build discovery for a container-native world.
Continue reading this article on the official Joyent blog...</description>
    </item>
    
    <item>
      <title>Dynamic Nginx upstreams with Containerbuddy</title>
      <link>http://0x74696d.com/posts/dynamic-nginx-upstreams-with-containerbuddy/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/dynamic-nginx-upstreams-with-containerbuddy/</guid>
      <description>Containerbuddy simplifies service discovery in Docker and provides a workaround for applications not designed from the start for container-native discovery. Here I demonstrate how to make Nginx container-native with Containerbuddy.
Continue reading this article on the official Joyent blog...</description>
    </item>
    
    <item>
      <title>Simplifying service discovery in Docker with Containerbuddy</title>
      <link>http://0x74696d.com/posts/simplifying-service-discovery-in-docker-with-containerbuddy/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/simplifying-service-discovery-in-docker-with-containerbuddy/</guid>
      <description>Container-native applications have new responsibilities for discovery. But no one wants to rewrite all our current applications! So what do we do about it?
Continue reading this article on the official Joyent blog...</description>
    </item>
    
    <item>
      <title>Running a host-local Docker Registry</title>
      <link>http://0x74696d.com/posts/host-local-docker-registry/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/host-local-docker-registry/</guid>
      <description>One of the options for running a private Docker registry is to run your own with the Docker Registry daemon. When we started using Docker this was our approach from the beginning. At the time the Docker Registry was a Python app running on gunicorn; the new version is written in Go. A nice feature is that one can use S3 as the backing store, which almost makes the registry a proxy to S3.</description>
    </item>
    
    <item>
      <title>Analytics on the Cheap</title>
      <link>http://0x74696d.com/posts/analytics-on-the-cheap/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/analytics-on-the-cheap/</guid>
      <description>In November of 2013 I was at the AWS ReInvent conference, where they previewed their new service Kinesis. The long story short of this is that it&#39;s like a hosted Kafka. And the long story short of Kafka is that it&#39;s a way to ingest a whole lot of data in the short period of time so that you can process it in some kind of near-offline process later. The seemingly canonical example is something like log data.</description>
    </item>
    
    <item>
      <title>go get considered harmful</title>
      <link>http://0x74696d.com/posts/go-get-considered-harmful/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/go-get-considered-harmful/</guid>
      <description>One of my favorite essays on Python packaging is Armin Ronacher&#39;s Python Packaging: Hate, hate, hate everywhere. And one of the reasons why I thought of it lately is to remind me that Go isn&#39;t the only language with crazy dependency management problems.
Friends don&#39;t let friends go get Let&#39;s get the big one out of the way. The giant miss that Go made with dependencies was go get. Oh, it&#39;s cool and all the first time you use it, and then you realize that there&#39;s no pinning of versions.</description>
    </item>
    
    <item>
      <title>Docker: Training Wheels For LXC, Part I [talk]</title>
      <link>http://0x74696d.com/posts/training-wheels-for-lxc-part-i/</link>
      <pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/training-wheels-for-lxc-part-i/</guid>
      <description>Welcome sysadvent readers! You&#39;ll almost certainly note that I never got around to writing a Part II of this post or expanding on other Docker-related topics on this blog. I&#39;ve been busy working away pretty solidly with not a ton of time for blogging or tweeting. But if you&#39;re interested in more DevOps goodness be sure to follow @bridgetkromhout and stay tuned here for new material over the next few months.</description>
    </item>
    
    <item>
      <title>Tag All The Things!</title>
      <link>http://0x74696d.com/posts/tag-all-the-things/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/tag-all-the-things/</guid>
      <description>If you&#39;re using push-based orchestration like Fabric, you need hostnames to send commands over ssh to your instances. But if the instances are in an AWS autoscaling group, you don&#39;t know most of the hostnames of the boxes at any given time. Typing out EC2 hostnames like ec2-11-222-33-44.compute-1.amazonaws.com sucks once you have a couple dozen instances in play. You could have each box register itself in Route53 with some kind of friendly name, but then you&#39;ll need to wait for DNS propagation and your local ~/.</description>
    </item>
    
    <item>
      <title>Logging with Docker</title>
      <link>http://0x74696d.com/posts/docker-logging/</link>
      <pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/docker-logging/</guid>
      <description>Hello from the future (November 2015)! Apparently this article has some good Google juice and so people still land here looking for guidance on logging in Docker more than 2 years later. Today Docker provides log drivers now that will let you send your logs off the host via syslog or other log shipping mechanisms. So please don&#39;t follow the advice in this article!  I spent a couple of days this week working on a new deployment design using Docker.</description>
    </item>
    
    <item>
      <title>Session Store Design</title>
      <link>http://0x74696d.com/posts/session-store-design/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/session-store-design/</guid>
      <description>After my talk on DynamoDB a few weeks ago, one of the guys from Basho sent me an email and told me I should check out Riak. So in order to have a project to mess around with it, I decided to work up a session store for Flask. Session stores are one of the use cases called out on Basho&#39;s site, so I figured that&#39;d be a good experiment.</description>
    </item>
    
    <item>
      <title>Falling In And Out Of Love with DynamoDB, Part II</title>
      <link>http://0x74696d.com/posts/falling-in-and-out-of-love-with-dynamodb-part-ii/</link>
      <pubDate>Thu, 11 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/falling-in-and-out-of-love-with-dynamodb-part-ii/</guid>
      <description>Amazon&#39;s DynamoDB provides high concurrent throughput, availability across multiple AWS data centers, and the convenience of pay-as-you go pricing. All this is great, but key design for DynamoDB results in some unexpected challenges. We have built a number of production systems at this point using DynamoDB and as such have a bit of a love/hate relationship with the product.
 In my last post I put up my slides from a talk by this same title.</description>
    </item>
    
    <item>
      <title>Falling In And Out Of Love with DynamoDB [talk]</title>
      <link>http://0x74696d.com/posts/falling-in-and-out-of-love-with-dynamodb/</link>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/falling-in-and-out-of-love-with-dynamodb/</guid>
      <description>On Tuesday night I gave a talk on my experiences using Amazon&#39;s DynamoDB. Here are the slides for my talk.
PhillyDB and Philly AWS hosted the event, and there were some great lightning talks. Thanks to Michael Reichner and Aaron Feng for putting this together. Aaron is trying to get Philly AWS running regularly again, so if you live or work in the Philadelphia area you should definitely join the Google Group and come to meetings.</description>
    </item>
    
    <item>
      <title>DynamoDB Batch Uploads</title>
      <link>http://0x74696d.com/posts/dynamodb-batch-uploads/</link>
      <pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/dynamodb-batch-uploads/</guid>
      <description>I work with a moderately large AWS deployment, and this includes a few applications that are using Amazon&#39;s DynamoDB. One of the many many quirks of working with DynamoDB is that it&#39;s optimized towards highly parallel operations. Ordinarily this is exactly what you want, but if you ran into the situation I did over the weekend not so much.
I had a modestly-sized data subset of user video-watching habits -- on the order of 10s of millions of rows -- that had to be transfered from a MySQL instance on RDS to DynamoDB.</description>
    </item>
    
    <item>
      <title>Django Database Anti-Patterns</title>
      <link>http://0x74696d.com/posts/django-db-antipatterns/</link>
      <pubDate>Sun, 19 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/django-db-antipatterns/</guid>
      <description>At work our core application is a big Django project that&#39;s been developed over the course of a couple of years. At the scale at which we&#39;re operating, we&#39;re finding lots of areas where we&#39;ve had to tweak or replace out-of-the-box components with more performant alternatives. One of the areas that&#39;s a constant source of pain for me is the Django ORM.
 Disclaimer: I really do like Django. It&#39;s a great tool for getting a site up and running fast.</description>
    </item>
    
    <item>
      <title>Securing Charles Proxy with a Personal CA</title>
      <link>http://0x74696d.com/posts/charlesssl/</link>
      <pubDate>Mon, 13 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/charlesssl/</guid>
      <description>Some of the guys in my shop like to use Charles proxy to help debug their web and mobile applications. It&#39;s no good for non-HTTP traffic so it&#39;s a bit of a unitasker, but modulo some questionable UI choices it&#39;s not bad. Charles is user-friendly enough that you can hand it off to a wet-behind-the-ears web developer who wouldn&#39;t know a TCP SYN flag if you waved it at him. And it has some nice features like on-the-fly traffic throttling that we find handy in the online video business -- as far as I know you can&#39;t do that with Burp suite.</description>
    </item>
    
    <item>
      <title>Hey, new blog!</title>
      <link>http://0x74696d.com/posts/newblog/</link>
      <pubDate>Sun, 12 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/newblog/</guid>
      <description>This is my blog. More to the point, it&#39;s my blog, which means that the opinions here are mine and not those of my employer, co-workers, spouse, etc. I&#39;m going to attempt to post once a week, updating on Sundays or thereabouts.
This blog is currently deployed on Github Pages. At the time of this writing it&#39;s a MVB (Minimum Viable Blog). The CSS is still a bit of a mess from where I ripped off better designers than me, particularly on Android.</description>
    </item>
    
  </channel>
</rss>