<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joyent on 0x74696d</title>
    <link>http://0x74696d.com/categories/joyent/index.xml</link>
    <description>Recent content in Joyent on 0x74696d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://0x74696d.com/categories/joyent/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Secrets Management in the Autopilot Pattern</title>
      <link>http://0x74696d.com/posts/secrets-management-in-the-autopilotpattern/</link>
      <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/secrets-management-in-the-autopilotpattern/</guid>
      <description>&lt;p&gt;No matter how we deploy our applications, managing secrets invokes the chicken-and-the-egg problem. Any system for secrets management has to answer the question of how the application authenticates to the system managing the secrets in the first place. Applications built with the Autopilot Pattern can be easily made to leverage secrets management services, but it&#39;s important to understand the security model and threat model of these services.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/secrets-management-in-the-autopilotpattern&#34;&gt;Check out the full article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Consul and etcd in the Autopilot Pattern</title>
      <link>http://0x74696d.com/posts/consul-etcd-on-triton/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/consul-etcd-on-triton/</guid>
      <description>&lt;p&gt;Applications developed with the Autopilot Pattern are self-operating and self-configuring but use an external service catalog like Consul or etcd to store and coordinate global state. ContainerPilot sends the service catalog heartbeats to record that an instance of an application is still up and running. Both Consul and etcd have interesting assumptions about their topology that end users deploying on Triton should be aware of.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/consul-etcd-on-triton&#34;&gt;Check out the full article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Video - Introduction to the Autopilot Pattern</title>
      <link>http://0x74696d.com/posts/video-intro-autopilot-pattern/</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/video-intro-autopilot-pattern/</guid>
      <description>&lt;p&gt;In this video I introduce the Autopilot Pattern with illustrated examples and a walkthrough of our Autopilot Pattern example application and how ContainerPilot makes it easier to containerize applications new and old.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/video-autopilot-pattern&#34;&gt;Check out the full article and the video on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring and scaling with ContainerPilot telemetry</title>
      <link>http://0x74696d.com/posts/monitoring-and-scaling-with-application-telemetry/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/monitoring-and-scaling-with-application-telemetry/</guid>
      <description>&lt;p&gt;Application health checking is a key feature of ContainerPilot (formerly Containerbuddy). The user-defined health check gives us a binary way of determining whether the application is working. If the application is healthy, ContainerPilot sends a heartbeat to the discovery catalog, and if it&#39;s not, other ContainerPilot-enabled applications will stop sending requests to it. But automatic scaling of a service depends on more than just the pass/fail of a health check. Every application has key performance indicators that tell us if the service is nearing overload and should be scaled up or is under-utilized and can be scaled down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/containerpilot-telemetry&#34;&gt;Check out the full article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Production Docker logs on Triton</title>
      <link>http://0x74696d.com/posts/docker-log-drivers/</link>
      <pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/docker-log-drivers/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;http://0x74696d.com/posts/docker-logging&#34;&gt;previous post&lt;/a&gt; I talked about an approach I took getting logs out of Docker containers when I first started using Docker way back at the end of 2013. But Docker has done a lot of growing up since then!&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;docker logs&lt;/code&gt; to get our container logs works in development but in production we need to centralize our logs. Triton has support for the syslog, Graylog, and Fluentd log drivers and we can use them to support production-ready log collection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/docker-log-drivers&#34;&gt;Check out the full article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing the autopilot pattern</title>
      <link>http://0x74696d.com/posts/applications-on-autopilot/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/applications-on-autopilot/</guid>
      <description>&lt;p&gt;Deploying containerized applications and connecting them together is a challenge because it forces developers to design for operationalization. Autopiloting applications are a powerful design pattern to solving these problems. By pushing the responsibility for understanding startup, shutdown, scaling, and recovery from failure into the application, we can build intelligent architectures that minimize human intervention in operation. But we can&#39;t rewrite all our applications at once, so we need a way to build application containers that can knit together legacy and greenfield applications alike. This project demonstrates the autopilot pattern by applying it to a simple microservices deployment using Nginx and two Node.js applications.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/applications-on-autopilot&#34;&gt;Check out the full article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL on Autopilot</title>
      <link>http://0x74696d.com/posts/mysql-on-autopilot/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/mysql-on-autopilot/</guid>
      <description>&lt;p&gt;DBaaS solutions lock too many doors: we&#39;re locked into a service provider and locked out of configuring it as we need. Fortunately, modern operational patterns are emerging that eliminate the complexity of running even sophisticated applications like databases and free us from the lock-in of *aaS. Now we are free to develop on our laptops and deploy to private data centers, combining the simplicity we thought was only possible with *aaS with the portability of running applications on our own terms. Let&#39;s take a look at how to do that with MySQL.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/dbaas-simplicity-no-lock-in&#34;&gt;Check out the full article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a microservices stack in seconds</title>
      <link>http://0x74696d.com/posts/microservices-stack-in-seconds/</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/microservices-stack-in-seconds/</guid>
      <description>&lt;p&gt;Over the last couple weeks I&#39;ve been working on a project at Joyent to demonstrate the components of a container-native microservices architecture. Today I&#39;ve put the pieces together. I&#39;m using &lt;a href=&#34;https://github.com/joyent/containerbuddy&#34;&gt;Containerbuddy&lt;/a&gt; in a stack that includes Nginx, Couchbase, a Node.js application, Cloudflare DNS, and our Triton platform. All the components can be swapped out for your favorite ones just by changing a &lt;code&gt;docker-compose.yml&lt;/code&gt; description.&lt;/p&gt;

&lt;p&gt;And there&#39;s not a scheduler in sight! When you ditch your VMs and deploy on bare metal in an environment where containers have their own NIC(s), you don&#39;t need all that extra overhead. Simple tools will do the job for you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/how-to-dockerize-a-complete-application&#34;&gt;Check out the full article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatic DNS Updates w/ Containerbuddy</title>
      <link>http://0x74696d.com/posts/dynamic-dns-for-docker-w-containerbuddy/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/dynamic-dns-for-docker-w-containerbuddy/</guid>
      <description>&lt;p&gt;In a container-native project, we need to balance the desire for ephemeral infrastructure with the requirement to provide a predictable load-balanced interface with the outside world. By updating DNS records for a domain based on changes in the discovery service, we can make sure our users can reach the load-balancer for our project at all times.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/automatic-dns-updates-with-containerbuddy&#34;&gt;Continue reading this article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Container-Native Architecture [talk]</title>
      <link>http://0x74696d.com/posts/container-native-architecture-talk/</link>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/container-native-architecture-talk/</guid>
      <description>&lt;p&gt;On October 29th I gave a talk on container-native architecture at &lt;a href=&#34;http://dynamicinfradays.org/events/2015-nyc/&#34;&gt;ContainerDays NYC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dynamicinfradays.org/events/2015-nyc/programme.html#architecture&#34;&gt;From the programme:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Moving your application into a container and deploying it to production is a great first step towards taking advantage of containerization. This gets you past &amp;quot;works on my machine&amp;quot;, and Docker makes this easy. But the real value of containers -- fast immutable deployments, maximizing resource utilization, and bare-metal performance -- comes from an architecture optimized for containers. This is container-native architecture.&lt;/p&gt;

&lt;p&gt;Tim will explore the story of a real-world large scale production microservices deployment of Docker, and the challenges faced in both design and operations of migrating this kind of multi-faceted application to a container-native architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find my slides &lt;a href=&#34;http://0x74696d.com/talk-containerdays-nyc-2015/#/&#34;&gt;here&lt;/a&gt;. I experimented with &lt;code&gt;reveal.js&lt;/code&gt; for these, so use &lt;code&gt;&amp;lt;space&lt;/code&gt;&amp;gt; to advance and &lt;code&gt;s&lt;/code&gt; to get the speaker&#39;s notes.&lt;/p&gt;

&lt;p&gt;You can watch the talk on &lt;a href=&#34;https://www.youtube.com/watch?v=08BuE6xyRnc&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anti-patterns for service discovery in Docker</title>
      <link>http://0x74696d.com/posts/anti-patterns-for-service-discovery-in-docker/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/anti-patterns-for-service-discovery-in-docker/</guid>
      <description>&lt;p&gt;Common patterns for microservice container deployments carry hidden assumptions that increase operational costs and put availability at risk. Let&#39;s break down the reasons why and how to build discovery for a container-native world.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/container-native-discovery&#34;&gt;Continue reading this article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dynamic Nginx upstreams with Containerbuddy</title>
      <link>http://0x74696d.com/posts/dynamic-nginx-upstreams-with-containerbuddy/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/dynamic-nginx-upstreams-with-containerbuddy/</guid>
      <description>&lt;p&gt;Containerbuddy simplifies service discovery in Docker and provides a workaround for applications not designed from the start for container-native discovery. Here I demonstrate how to make Nginx container-native with Containerbuddy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/dynamic-nginx-upstreams-with-containerbuddy&#34;&gt;Continue reading this article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simplifying service discovery in Docker with Containerbuddy</title>
      <link>http://0x74696d.com/posts/simplifying-service-discovery-in-docker-with-containerbuddy/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0x74696d.com/posts/simplifying-service-discovery-in-docker-with-containerbuddy/</guid>
      <description>&lt;p&gt;Container-native applications have new responsibilities for discovery. But no one wants to rewrite all our current applications! So what do we do about it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.joyent.com/blog/introducing-containerbuddy&#34;&gt;Continue reading this article on the official Joyent blog...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>